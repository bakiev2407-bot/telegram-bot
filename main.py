import os
import logging
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 23921954
API_HASH = 'e8b91c0c46c3edc7b063e8ef0096616f'
PHONE = '+79053089455'
BOT_TOKEN = '7554368701:AAEiNqwwnSKXvj5OEkHGZl_f1c8j3mszp48'
CHAT_TO_MONITOR = -1001484212179  # ‚¨ÖÔ∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô ID –ì–†–£–ü–ü–´ "–ú. –î–ü–° –£–ß–ê–õ–´üöîüöîüöî"
YOUR_USER_ID = 463717122  # –í–∞—à user_id

# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
is_monitoring = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
user_client = TelegramClient('user_session', API_ID, API_HASH)
bot_client = TelegramClient('bot_session', API_ID, API_HASH)

async def send_welcome_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        welcome_text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≥—Ä—É–ø–ø—ã "–ú. –î–ü–° –£–ß–ê–õ–´".

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/status - —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã

üí° **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!**"""
        
        await bot_client.send_message(YOUR_USER_ID, welcome_text)
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

async def send_to_user(text, media=None):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if not is_monitoring:
            return
            
        if media and os.path.exists(media):
            await bot_client.send_file(
                YOUR_USER_ID, 
                media, 
                caption=text[:2000] if text else None
            )
            logger.info("–ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            await bot_client.send_message(YOUR_USER_ID, text[:4000])
            logger.info("–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global is_monitoring
    if event.sender_id == YOUR_USER_ID:
        is_monitoring = True
        await event.reply("‚úÖ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!**\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã.")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /start")

@bot_client.on(events.NewMessage(pattern='/stop'))
async def stop_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    global is_monitoring
    if event.sender_id == YOUR_USER_ID:
        is_monitoring = False
        await event.reply("‚èπÔ∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**\n–°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥—É—Ç.")
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∫–æ–º–∞–Ω–¥–µ /stop")

@bot_client.on(events.NewMessage(pattern='/status'))
async def status_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    if event.sender_id == YOUR_USER_ID:
        status = "‚úÖ **–∑–∞–ø—É—â–µ–Ω**" if is_monitoring else "‚èπÔ∏è **–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**"
        await event.reply(f"üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:** {status}")

@user_client.on(events.NewMessage(chats=CHAT_TO_MONITOR))
async def group_message_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã"""
    global is_monitoring
    
    if not is_monitoring:
        return  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    
    try:
        message = event.message
        sender = await message.get_sender()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if hasattr(sender, 'title'):
            sender_name = sender.title
        elif hasattr(sender, 'username') and sender.username:
            sender_name = f"@{sender.username}"
        elif hasattr(sender, 'first_name'):
            sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
        else:
            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üì© **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã**\n"
        text += f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {sender_name}\n"
        text += f"üí¨ **–¢–µ–∫—Å—Ç:** {message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
        text += f"‚è∞ **–í—Ä–µ–º—è:** {message.date.strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        media_path = None
        if message.media:
            try:
                if isinstance(message.media, (MessageMediaPhoto, MessageMediaDocument)):
                    media_path = await message.download_media(file='downloads/')
                    media_type = '–§–æ—Ç–æ' if isinstance(message.media, MessageMediaPhoto) else '–î–æ–∫—É–º–µ–Ω—Ç'
                    text += f"\nüìé **–¢–∏–ø –º–µ–¥–∏–∞:** {media_type}"
                    logger.info(f"–ú–µ–¥–∏–∞ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_to_user(text, media_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if media_path and os.path.exists(media_path):
            try:
                os.remove(media_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø–µ—Ä–≤—ã–º
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await bot_client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_welcome_message()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        await user_client.start(phone=PHONE)
        logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        me = await user_client.get_me()
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (id: {me.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
        try:
            chat = await user_client.get_entity(CHAT_TO_MONITOR)
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {chat.title} (id: {chat.id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: {e}")
            return
        
        logger.info("üöÄ –ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /start, /stop, /status –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º")
        logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        await asyncio.gather(
            user_client.run_until_disconnected(),
            bot_client.run_until_disconnected()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
    os.makedirs('downloads', exist_ok=True)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")