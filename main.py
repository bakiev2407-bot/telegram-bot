import os
import logging
import json
import asyncio
import sys
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument

# üìç –ü—É—Ç–∏ –¥–ª—è Timeweb Cloud
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_PATH = os.path.join(BASE_DIR, "config", ".env")
LOGS_DIR = os.path.join(BASE_DIR, "logs")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs(LOGS_DIR, exist_ok=True)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOGS_DIR, 'bot.log')),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Timeweb"""
    config = {}
    try:
        if os.path.exists(CONFIG_PATH):
            with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if line and '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        config[key] = value.strip()
        else:
            logger.error(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG_PATH}")
            
        return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = int(config.get('API_ID', 0))
API_HASH = config.get('API_HASH', '')
PHONE = config.get('PHONE', '')
BOT_TOKEN = config.get('BOT_TOKEN', '')
CHAT_TO_MONITOR = int(config.get('CHAT_TO_MONITOR', 0))
YOUR_USER_ID = int(config.get('YOUR_USER_ID', 0))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not all([API_ID, API_HASH, BOT_TOKEN, CHAT_TO_MONITOR]):
    logger.error("‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
    logger.error("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å: " + CONFIG_PATH)
    sys.exit(1)

logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SUBSCRIBERS_FILE = os.path.join(BASE_DIR, "subscribers.json")
ADMINS_FILE = os.path.join(BASE_DIR, "admins.json")
DOWNLOADS_DIR = os.path.join(BASE_DIR, "downloads")

class ForwardBot:
    def __init__(self):
        self.is_monitoring = True
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        session_dir = os.path.join(BASE_DIR, "sessions")
        os.makedirs(session_dir, exist_ok=True)
        
        self.user_client = TelegramClient(
            os.path.join(session_dir, 'user_session'), 
            API_ID, 
            API_HASH
        )
        self.bot_client = TelegramClient(
            os.path.join(session_dir, 'bot_session'), 
            API_ID, 
            API_HASH
        )
        
    def load_data(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(filename):
                with open(filename, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
            return []
    
    def save_data(self, data, filename):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")
    
    def load_subscribers(self):
        return self.load_data(SUBSCRIBERS_FILE)
    
    def save_subscribers(self, subscribers):
        self.save_data(subscribers, SUBSCRIBERS_FILE)
    
    def load_admins(self):
        admins = self.load_data(ADMINS_FILE)
        if YOUR_USER_ID and YOUR_USER_ID not in admins:
            admins.append(YOUR_USER_ID)
            self.save_data(admins, ADMINS_FILE)
        return admins
    
    async def is_admin(self, user_id):
        admins = self.load_admins()
        return user_id in admins
    
    async def send_to_subscribers(self, text, media=None):
        if not self.is_monitoring:
            return
            
        subscribers = self.load_subscribers()
        if not subscribers:
            logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        success_count = 0
        failed_users = []
        
        for user_id in subscribers:
            try:
                if media and os.path.exists(media):
                    await self.bot_client.send_file(
                        user_id, 
                        media, 
                        caption=text[:2000] if text else None
                    )
                else:
                    await self.bot_client.send_message(user_id, text[:4000])
                success_count += 1
                await asyncio.sleep(0.2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                
            except Exception as e:
                error_msg = str(e).lower()
                if any(msg in error_msg for msg in ['blocked', 'deactivated', 'invalid']):
                    failed_users.append(user_id)
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        if failed_users:
            updated_subscribers = [uid for uid in subscribers if uid not in failed_users]
            self.save_subscribers(updated_subscribers)
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(failed_users)}")
        
        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count}/{len(subscribers)}")
        return success_count

    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        
        @self.bot_client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            user_id = event.sender_id
            subscribers = self.load_subscribers()
            
            if user_id not in subscribers:
                subscribers.append(user_id)
                self.save_subscribers(subscribers)
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
            
            welcome_text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–î–ü–° –£–ß–ê–õ–´".

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/status - —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üí° –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"""
            
            await event.reply(welcome_text)
        
        @self.bot_client.on(events.NewMessage(pattern='/stop'))
        async def stop_handler(event):
            user_id = event.sender_id
            subscribers = self.load_subscribers()
            
            if user_id in subscribers:
                subscribers.remove(user_id)
                self.save_subscribers(subscribers)
                await event.reply("‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!**")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è")
            else:
                await event.reply("‚ÑπÔ∏è **–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.**")
        
        @self.bot_client.on(events.NewMessage(pattern='/status'))
        async def status_handler(event):
            subscribers = self.load_subscribers()
            user_status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if event.sender_id in subscribers else "‚ùå –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
            
            status_text = f"""üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**

üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: **{"‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if self.is_monitoring else "‚èπÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}**
üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: **{len(subscribers)}**
üîî –í–∞—à —Å—Ç–∞—Ç—É—Å: **{user_status}**"""
            
            await event.reply(status_text)

        @self.user_client.on(events.NewMessage(chats=CHAT_TO_MONITOR))
        async def group_message_handler(event):
            if not self.is_monitoring:
                return

            try:
                message = event.message
                
                text = f"üì© **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã**\n"
                text += f"üí¨ **–¢–µ–∫—Å—Ç:** {message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
                text += f"‚è∞ **–í—Ä–µ–º—è:** {message.date.strftime('%H:%M:%S')}"
                
                media_path = None
                if message.media:
                    try:
                        media_path = await message.download_media(file=DOWNLOADS_DIR)
                        text += f"\nüìé **–ú–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏—è**"
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")
                
                await self.send_to_subscribers(text, media_path)
                
                if media_path and os.path.exists(media_path):
                    try:
                        os.remove(media_path)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Timeweb"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
            os.makedirs(DOWNLOADS_DIR, exist_ok=True)
            
            logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ Timeweb Cloud...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await self.bot_client.start(bot_token=BOT_TOKEN)
            logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∏–µ–Ω—Ç
            await self.user_client.start(phone=PHONE)
            logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—É—â–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
            me = await self.user_client.get_me()
            logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name}")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            await self.setup_handlers()
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            try:
                await self.bot_client.send_message(
                    YOUR_USER_ID, 
                    "ü§ñ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Timeweb Cloud!**\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            logger.info("üöÄ –ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            while True:
                try:
                    await asyncio.gather(
                        self.user_client.run_until_disconnected(),
                        self.bot_client.run_until_disconnected()
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                    logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(10)
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def main():
    bot = ForwardBot()
    await bot.start()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")