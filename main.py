import os
import logging
import json
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 23921954
API_HASH = 'e8b91c0c46c3edc7b063e8ef0096616f'
PHONE = '+79053089455'
BOT_TOKEN = '7576598515:AAG6_zf1315Oe9FFWd3TfhHbrdN4vrEYub4'
CHAT_TO_MONITOR = -1001484212179
ADMIN_ID = 463717122  # –í–∞—à user_id

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SUBSCRIBERS_FILE = "subscribers.json"
PINNED_MESSAGE_FILE = "pinned_message.json"
ADVERTISEMENTS_FILE = "advertisements.json"

# –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
is_monitoring = True
is_advertisements_enabled = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
user_client = TelegramClient('user_session', API_ID, API_HASH)
bot_client = TelegramClient('bot_session', API_ID, API_HASH)

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ====================

def load_subscribers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def save_subscribers(subscribers):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(subscribers, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

def load_pinned_message():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        if os.path.exists(PINNED_MESSAGE_FILE):
            with open(PINNED_MESSAGE_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {"text": "", "is_active": False}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return {"text": "", "is_active": False}

def save_pinned_message(message_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        with open(PINNED_MESSAGE_FILE, 'w', encoding='utf-8') as f:
            json.dump(message_data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def load_advertisements():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if os.path.exists(ADVERTISEMENTS_FILE):
            with open(ADVERTISEMENTS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∫–ª–∞–º—ã: {e}")
        return []

def save_advertisements(ads):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        with open(ADVERTISEMENTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(ads, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã: {e}")

def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == ADMIN_ID

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

async def send_to_all_subscribers(text, media=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not is_monitoring:
        return
        
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return
    
    success_count = 0
    for user_id in subscribers:
        try:
            if media and os.path.exists(media):
                await bot_client.send_file(
                    user_id, 
                    media, 
                    caption=text[:2000] if text else None
                )
            else:
                await bot_client.send_message(user_id, text[:4000])
            success_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            if "bot was blocked" in str(e).lower():
                subscribers.remove(user_id)
                save_subscribers(subscribers)
    
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count}/{len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    return success_count

async def send_pinned_message_to_new_user(user_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    pinned_msg = load_pinned_message()
    if pinned_msg.get("is_active") and pinned_msg.get("text"):
        try:
            await bot_client.send_message(user_id, f"üìå **–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n{pinned_msg['text']}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def send_random_advertisement():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not is_advertisements_enabled:
        return
        
    advertisements = load_advertisements()
    if not advertisements:
        return
        
    import random
    ad = random.choice(advertisements)
    
    if ad.get("is_active", False):
        subscribers = load_subscribers()
        success_count = 0
        
        for user_id in subscribers:
            try:
                await bot_client.send_message(user_id, f"üì¢ **–†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n{ad['text']}")
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        logger.info(f"üì¢ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count}/{len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

# ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ====================

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global is_monitoring
    
    user_id = event.sender_id
    subscribers = load_subscribers()
    
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_pinned_message_to_new_user(user_id)
    
    is_monitoring = True
    
    welcome_text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è "–î–ü–° –£–ß–ê–õ–´".

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/status - —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üí° –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –î–ü–° –≤ –≥–æ—Ä–æ–¥–µ –£—á–∞–ª—ã!"""
    
    await event.reply(welcome_text)

@bot_client.on(events.NewMessage(pattern='/stop'))
async def stop_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    user_id = event.sender_id
    subscribers = load_subscribers()
    
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        await event.reply("‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!**")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è")
    else:
        await event.reply("‚ÑπÔ∏è **–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.**")

@bot_client.on(events.NewMessage(pattern='/status'))
async def status_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    subscribers = load_subscribers()
    total_subscribers = len(subscribers)
    user_status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if event.sender_id in subscribers else "‚ùå –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
    
    status_text = f"""üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**

üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: **{"‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if is_monitoring else "‚èπÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}**
üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: **{total_subscribers}**
üîî –í–∞—à —Å—Ç–∞—Ç—É—Å: **{user_status}**"""
    
    await event.reply(status_text)

# ==================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

@bot_client.on(events.NewMessage(pattern='/admin'))
async def admin_handler(event):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(event.sender_id):
        await event.reply("‚ùå **–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!**")
        return
    
    admin_text = """üõ†Ô∏è **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
/subscribers - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
/stats - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üì¢ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π:**
/broadcast - —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
/pin_message - –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
/ads - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–æ–π

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:**
/toggle_monitoring - –≤–∫–ª/–≤—ã–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
/toggle_ads - –≤–∫–ª/–≤—ã–∫–ª —Ä–µ–∫–ª–∞–º—É

üíæ **–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:**
/export_subscribers - —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    
    await event.reply(admin_text)

@bot_client.on(events.NewMessage(pattern='/subscribers'))
async def subscribers_handler(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    if not is_admin(event.sender_id):
        return
        
    subscribers = load_subscribers()
    if not subscribers:
        await event.reply("üì≠ **–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç**")
        return
    
    subscribers_text = f"üë• **–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ({len(subscribers)}):**\n\n"
    for i, user_id in enumerate(subscribers[:50], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 50
        subscribers_text += f"{i}. `{user_id}`\n"
    
    if len(subscribers) > 50:
        subscribers_text += f"\n... –∏ –µ—â–µ {len(subscribers) - 50} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
    
    await event.reply(subscribers_text)

@bot_client.on(events.NewMessage(pattern='/stats'))
async def stats_handler(event):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if not is_admin(event.sender_id):
        return
        
    subscribers = load_subscribers()
    pinned_msg = load_pinned_message()
    advertisements = load_advertisements()
    active_ads = len([ad for ad in advertisements if ad.get('is_active', False)])
    
    stats_text = f"""üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë• **–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:**
‚Ä¢ –í—Å–µ–≥–æ: {len(subscribers)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(subscribers)}

üìå **–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
‚Ä¢ –°—Ç–∞—Ç—É—Å: {"‚úÖ –∞–∫—Ç–∏–≤–Ω–æ" if pinned_msg.get('is_active') else "‚ùå –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ"}
‚Ä¢ –î–ª–∏–Ω–∞: {len(pinned_msg.get('text', ''))} —Å–∏–º–≤–æ–ª–æ–≤

üì¢ **–†–µ–∫–ª–∞–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
‚Ä¢ –í—Å–µ–≥–æ: {len(advertisements)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_ads}
‚Ä¢ –†–µ–∫–ª–∞–º–∞: {"‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if is_advertisements_enabled else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞"}

üîî **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** {"‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if is_monitoring else "‚ùå –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}"""
    
    await event.reply(stats_text)

@bot_client.on(events.NewMessage(pattern='/broadcast'))
async def broadcast_handler(event):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not is_admin(event.sender_id):
        return
        
    message_text = event.message.text.replace('/broadcast', '').strip()
    if not message_text:
        await event.reply("‚ùå **–£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n`/broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`")
        return
        
    subscribers = load_subscribers()
    if not subscribers:
        await event.reply("‚ùå **–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**")
        return
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    confirm_text = f"""üì¢ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏**

üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:100]}...
üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(subscribers)}

‚úÖ **–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:** `/confirm_broadcast`"""
    
    await event.reply(confirm_text)

@bot_client.on(events.NewMessage(pattern='/confirm_broadcast'))
async def confirm_broadcast_handler(event):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(event.sender_id):
        return
        
    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å broadcast
    async for message in bot_client.iter_messages(await event.get_chat(), limit=10):
        if message.text and "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏" in message.text:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            lines = message.text.split('\n')
            for line in lines:
                if "–°–æ–æ–±—â–µ–Ω–∏–µ:" in line:
                    message_text = line.split("–°–æ–æ–±—â–µ–Ω–∏–µ:")[1].strip()
                    if "..." in message_text:
                        # –ù—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç, —É–ø—Ä–æ—Å—Ç–∏–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                        await event.reply("‚ùå **–ü–µ—Ä–µ—à–ª–∏—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏**")
                        return
            
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–∏–º —Ç–µ–∫—Å—Ç –∑–∞–Ω–æ–≤–æ
            await event.reply("‚ùå **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ:** `/broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`")
            return

@bot_client.on(events.NewMessage(pattern='/pin_message'))
async def pin_message_handler(event):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(event.sender_id):
        return
        
    message_text = event.message.text.replace('/pin_message', '').strip()
    if not message_text:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        pinned_msg = load_pinned_message()
        if pinned_msg.get('is_active'):
            current_text = f"üìå **–¢–µ–∫—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–∫—Ç–∏–≤–Ω–æ):**\n\n{pinned_msg['text']}"
        else:
            current_text = "üìå **–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ**"
        
        help_text = f"""{current_text}

üí° **–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**
`/pin_message –í–∞—à —Ç–µ–∫—Å—Ç`

üîß **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
`/unpin_message` - –æ—Ç–∫–ª—é—á–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
`/pin_preview` - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"""
        
        await event.reply(help_text)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pinned_data = {
        "text": message_text,
        "is_active": True
    }
    save_pinned_message(pinned_data)
    
    await event.reply(f"‚úÖ **–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!**\n\n{message_text}")

@bot_client.on(events.NewMessage(pattern='/unpin_message'))
async def unpin_message_handler(event):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    if not is_admin(event.sender_id):
        return
        
    pinned_data = load_pinned_message()
    pinned_data["is_active"] = False
    save_pinned_message(pinned_data)
    
    await event.reply("‚ùå **–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ**")

@bot_client.on(events.NewMessage(pattern='/toggle_monitoring'))
async def toggle_monitoring_handler(event):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not is_admin(event.sender_id):
        return
        
    global is_monitoring
    is_monitoring = not is_monitoring
    
    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω" if is_monitoring else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω"
    await event.reply(f"üîî **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {status}**")

@bot_client.on(events.NewMessage(pattern='/toggle_ads'))
async def toggle_ads_handler(event):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã"""
    if not is_admin(event.sender_id):
        return
        
    global is_advertisements_enabled
    is_advertisements_enabled = not is_advertisements_enabled
    
    status = "‚úÖ –≤–∫–ª—é—á–µ–Ω–∞" if is_advertisements_enabled else "‚ùå –≤—ã–∫–ª—é—á–µ–Ω–∞"
    await event.reply(f"üì¢ **–†–µ–∫–ª–∞–º–∞ {status}**")

@bot_client.on(events.NewMessage(pattern='/export_subscribers'))
async def export_subscribers_handler(event):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    if not is_admin(event.sender_id):
        return
        
    subscribers = load_subscribers()
    if not subscribers:
        await event.reply("‚ùå **–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞**")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
    filename = "subscribers.txt"
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –±–æ—Ç–∞:\n")
        f.write("=" * 30 + "\n")
        for i, user_id in enumerate(subscribers, 1):
            f.write(f"{i}. {user_id}\n")
    
    try:
        await bot_client.send_file(
            event.chat_id,
            filename,
            caption=f"üìä **–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤**\n–í—Å–µ–≥–æ: {len(subscribers)}"
        )
        os.remove(filename)
    except Exception as e:
        await event.reply(f"‚ùå **–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {e}")

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –ì–†–£–ü–ü–´ ====================

@user_client.on(events.NewMessage(chats=CHAT_TO_MONITOR))
async def group_message_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã"""
    global is_monitoring
    
    if not is_monitoring:
        return
    
    try:
        message = event.message
        sender = await message.get_sender()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if hasattr(sender, 'title'):
            sender_name = sender.title
        elif hasattr(sender, 'username') and sender.username:
            sender_name = f"@{sender.username}"
        elif hasattr(sender, 'first_name'):
            sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
        else:
            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üì© **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã**\n"
        text += f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {sender_name}\n"
        text += f"üí¨ **–¢–µ–∫—Å—Ç:** {message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
        text += f"‚è∞ **–í—Ä–µ–º—è:** {message.date.strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        media_path = None
        if message.media:
            try:
                if isinstance(message.media, (MessageMediaPhoto, MessageMediaDocument)):
                    media_path = await message.download_media(file='downloads/')
                    media_type = '–§–æ—Ç–æ' if isinstance(message.media, MessageMediaPhoto) else '–î–æ–∫—É–º–µ–Ω—Ç'
                    text += f"\nüìé **–¢–∏–ø –º–µ–¥–∏–∞:** {media_type}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        await send_to_all_subscribers(text, media_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if media_path and os.path.exists(media_path):
            try:
                os.remove(media_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ==================== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        os.makedirs('downloads', exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await bot_client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        await user_client.start(phone=PHONE)
        logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        me = await user_client.get_me()
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (id: {me.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
        chat = await user_client.get_entity(CHAT_TO_MONITOR)
        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {chat.title}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        subscribers = load_subscribers()
        logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
        
        logger.info("üöÄ –ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ /admin")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–ª–∞–º—ã (—Ä–∞–∑ –≤ 24 —á–∞—Å–∞)
        async def advertisement_scheduler():
            while True:
                await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞
                await send_random_advertisement()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(advertisement_scheduler())
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.gather(
            user_client.run_until_disconnected(),
            bot_client.run_until_disconnected()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")