import os
import logging
import json
import asyncio
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_ID = 23921954
API_HASH = 'e8b91c0c46c3edc7b063e8ef0096616f'
PHONE = '+79053089455'
BOT_TOKEN = '7576598515:AAG6_zf1315Oe9FFWd3TfhHbrdN4vrEYub4'
CHAT_TO_MONITOR = -1001484212179  # –î–ü–° –£–ß–ê–õ–´üöîüöîüöî"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
SUBSCRIBERS_FILE = "subscribers.json"

# –§–ª–∞–≥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
is_monitoring = True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
user_client = TelegramClient('user_session', API_ID, API_HASH)
bot_client = TelegramClient('bot_session', API_ID, API_HASH)

def load_subscribers():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SUBSCRIBERS_FILE):
            with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def save_subscribers(subscribers):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
    try:
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(subscribers, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

async def send_to_all_subscribers(text, media=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    if not is_monitoring:
        return
        
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return
    
    success_count = 0
    for user_id in subscribers:
        try:
            if media and os.path.exists(media):
                await bot_client.send_file(
                    user_id, 
                    media, 
                    caption=text[:2000] if text else None
                )
            else:
                await bot_client.send_message(user_id, text[:4000])
            success_count += 1
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
            if "bot was blocked" in str(e).lower():
                subscribers.remove(user_id)
                save_subscribers(subscribers)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)")
    
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count}/{len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def send_welcome_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        welcome_text = """ü§ñ **–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥—Ä—É–ø–ø—ã –∑–∞–ø—É—â–µ–Ω!**

‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞
üë• –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤

üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
        me = await user_client.get_me()
        await bot_client.send_message(me.id, welcome_text)
        logger.info("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")

@bot_client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global is_monitoring
    
    user_id = event.sender_id
    subscribers = load_subscribers()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    
    is_monitoring = True
    
    welcome_text = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**

‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è  "–î–ü–° –£–ß–ê–õ–´".

üìã **–ö–æ–º–∞–Ω–¥—ã:**
/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/status - —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

üí° –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ø—Å –≤ –≥–æ—Ä–æ–¥–µ —É—á–∞–ª—ã  !"""
    
    await event.reply(welcome_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

@bot_client.on(events.NewMessage(pattern='/stop'))
async def stop_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop - –æ—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = event.sender_id
    subscribers = load_subscribers()
    
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        await event.reply("‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!**\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ø—Å –≤ –≥–æ—Ä–æ–¥–µ —É—á–∞–ª—ã  ! ")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è")
    else:
        await event.reply("‚ÑπÔ∏è **–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.**")

@bot_client.on(events.NewMessage(pattern='/status'))
async def status_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    subscribers = load_subscribers()
    total_subscribers = len(subscribers)
    user_status = "‚úÖ –ø–æ–¥–ø–∏—Å–∞–Ω" if event.sender_id in subscribers else "‚ùå –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω"
    
    status_text = f"""üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**

üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: **{"‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if is_monitoring else "‚èπÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}**
üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: **{total_subscribers}**
üîî –í–∞—à —Å—Ç–∞—Ç—É—Å: **{user_status}**

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
/start - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    await event.reply(status_text)

@bot_client.on(events.NewMessage(pattern='/stats'))
async def stats_handler(event):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        me = await user_client.get_me()
        if event.sender_id != me.id:
            await event.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
            
        subscribers = load_subscribers()
        status_text = f"""üìà **–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë• –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: **{len(subscribers)}**
üîî –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: **{"‚úÖ –∞–∫—Ç–∏–≤–µ–Ω" if is_monitoring else "‚èπÔ∏è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}**
üìä ID –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers}"""
        
        await event.reply(status_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats: {e}")

@bot_client.on(events.NewMessage(pattern='/broadcast'))
async def broadcast_handler(event):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    try:
        me = await user_client.get_me()
        if event.sender_id != me.id:
            await event.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
            
        message_text = event.message.text.replace('/broadcast', '').strip()
        if not message_text:
            await event.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
            
        subscribers = load_subscribers()
        success_count = 0
        
        for user_id in subscribers:
            try:
                await bot_client.send_message(user_id, f"üì¢ **–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{message_text}")
                success_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
        await event.reply(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã /broadcast: {e}")

@user_client.on(events.NewMessage(chats=CHAT_TO_MONITOR))
async def group_message_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã"""
    global is_monitoring
    
    if not is_monitoring:
        return  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    
    try:
        message = event.message
        sender = await message.get_sender()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        if hasattr(sender, 'title'):  # –î–ª—è –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø
            sender_name = sender.title
        elif hasattr(sender, 'username') and sender.username:
            sender_name = f"@{sender.username}"
        elif hasattr(sender, 'first_name'):
            sender_name = f"{sender.first_name or ''} {sender.last_name or ''}".strip()
        else:
            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        text = f"üì© **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã**\n"
        text += f"üë§ **–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:** {sender_name}\n"
        text += f"üí¨ **–¢–µ–∫—Å—Ç:** {message.text or '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞'}\n"
        text += f"‚è∞ **–í—Ä–µ–º—è:** {message.date.strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞
        media_path = None
        if message.media:
            try:
                if isinstance(message.media, (MessageMediaPhoto, MessageMediaDocument)):
                    media_path = await message.download_media(file='downloads/')
                    media_type = '–§–æ—Ç–æ' if isinstance(message.media, MessageMediaPhoto) else '–î–æ–∫—É–º–µ–Ω—Ç'
                    text += f"\nüìé **–¢–∏–ø –º–µ–¥–∏–∞:** {media_type}"
                    logger.info(f"–ú–µ–¥–∏–∞ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {media_path}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –í–°–ï–ú –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        await send_to_all_subscribers(text, media_path)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if media_path and os.path.exists(media_path):
            try:
                os.remove(media_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
        os.makedirs('downloads', exist_ok=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –ø–µ—Ä–≤—ã–º
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        await bot_client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        await user_client.start(phone=PHONE)
        logger.info("‚úÖ –ê–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ
        me = await user_client.get_me()
        logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (id: {me.id})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_welcome_message()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ
        try:
            chat = await user_client.get_entity(CHAT_TO_MONITOR)
            logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã: {chat.title} (id: {chat.id})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ: {e}")
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = load_subscribers()
        logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
        
        logger.info("üöÄ –ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å /start –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏")
        logger.info("‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–æ–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        await asyncio.gather(
            user_client.run_until_disconnected(),
            bot_client.run_until_disconnected()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")